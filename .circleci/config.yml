version: 2.1

orbs:
  helm: entur/helm@0.0.1

executors:
  java-11:
    docker:
    - image: circleci/openjdk:11-jdk
      environment:
        _JAVA_OPTIONS: -Xmx1024m
        TERM: dumb
        TZ: "/usr/share/zoneinfo/Europe/Stockholm"
  entur-cci-toolbox:
    docker:
      - image: entur/cci-toolbox:2.0
  cci-toolbox-java11:
    docker:
    - image: eu.gcr.io/carbon-1287/circleci-toolbox-image-java11
      auth:
        username: _json_key
        password: $GCLOUD_SERVICE_KEY
    environment:
      DEBIAN_FRONTEND: "noninteractive"
aliases:
  - &GCP-auth
    name: GCP Authentication for Google Cloud Deploy
    command: |
      echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
      gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
      gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER

  - &docker-login
    name: Docker login
    command: |
      echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
      /tools/docker_login.sh
  - &post-hook
    name: Notify about build and docker image pushed
    command: |
      echo 'export CIRCLE_PROJECT_REPONAME="$CIRCLE_PROJECT_REPONAME"' >> $BASH_ENV
      echo 'export CIRCLE_SHA1="$CIRCLE_SHA1"' >> $BASH_ENV
      echo 'export BUILD_STATUS_API_KEY="$BUILD_STATUS_API_KEY"' >> $BASH_ENV
      /tools/build_notify.sh
  - &bump-versions
    name: Bump version in pom file
    command: |
      mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit
      cd ~/project
      NEXT_VERSION=$(mvn -q -s /tools/m2/settings.xml -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      echo "export NEXT_VERSION=$NEXT_VERSION" >> $BASH_ENV
      echo "Bumping versions from $MVN_VERSION to $NEXT_VERSION"
      pushd helm/$CIRCLE_PROJECT_REPONAME
      sed -i "s/appVersion:.*$/appVersion: 'release-$NEXT_VERSION'/g"  ./Chart.yaml
      sed -i "s/imageTag:.*$/imageTag: release-$NEXT_VERSION/g"  ./values.yaml
      popd

  - &git-push-next-version-release
    name: Push to repository
    command: |
      echo "Trying to tag release-$MVN_VERSION"
      git config --global user.email "circleci@entur.org"
      git config --global user.name "EnturCircleCi"
      git tag -a release-$MVN_VERSION -m "Tagging current version"
      git add helm/$CIRCLE_PROJECT_REPONAME/Chart.yaml
      git add helm/$CIRCLE_PROJECT_REPONAME/values.yaml
      git add pom.xml
      git commit -m "Helm Update [ci skip]"
      git push --tags --set-upstream origin $CIRCLE_BRANCH

    ### Application version handling
  - &get-version-from-pom
    name: Getting version by maven pom version
    command: |
      cd ~/project
      MVN_VERSION=$(mvn -q -s /tools/m2/settings.xml -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      echo "export MVN_VERSION=$MVN_VERSION" >> $BASH_ENV
      echo $MVN_VERSION > ./mvn_version
  - &tag-successful-deployment
    name:
    command: |
      MVN_VERSION=$(cat ./mvn_version)
      echo "Trying to tag successful deployment with: $NAMESPACE-$MVN_VERSION"
      tag=release-$MVN_VERSION
      gitcommit=$(git rev-list -n 1 $tag)
      git config --global user.email "circleci@entur.org"
      git config --global user.name "EnturCircleCi"
      git tag -a $NAMESPACE-$MVN_VERSION $gitcommit -m "Tagging successfull deployment of version $MVN_VERSION to $NAMESPACE"
      git push origin $NAMESPACE-$MVN_VERSION
jobs:
  build:
    executor: cci-toolbox-java11
    steps:
      - checkout
      - restore_cache:
          key: dep-cache-{{ checksum "pom.xml" }}
      - run: mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.0:go-offline -s /tools/m2/settings.xml
      - save_cache:
          paths:
            - ~/.m2
          key: dep-cache-{{ checksum "pom.xml" }}
      # Cannot use -o because of snapshot dependencies.
      - run: mvn install -s /tools/m2/settings.xml
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - persist_to_workspace:
          root: ~/project
          paths:
            - target
            - pom.xml
            - .circleci
            - helm/*/
  deploy-docker:
    executor: cci-toolbox-java11
    steps:
      - attach_workspace:
          at: ~/project
      - restore_cache:
          key: dep-cache-{{ checksum "pom.xml" }}
      - save_cache:
          paths:
           - ~/.m2
          key: dep-cache-{{ checksum "pom.xml" }}
      - setup_remote_docker:
          docker_layer_caching: true
      - run: *GCP-auth
      - run: *docker-login
      - run:
          name: Docker build and push
          command: mvn docker:build docker:push -s /tools/m2/settings.xml
      - run: *post-hook

  prepare-next-release:
    executor: cci-toolbox-java11

    steps:
      - checkout
      - restore_cache:
          key: dep-cache-{{ checksum "pom.xml" }}
      - attach_workspace:
          at: ~/project
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - run: *get-version-from-pom
      - run: *bump-versions
      - run: *git-push-next-version-release
      - persist_to_workspace:
          root: .
          paths: ./mvn_version

  deploy:
    executor: entur-cci-toolbox

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *GCP-auth
      - helm/install-helm-chart:
          chart: ./helm/$CIRCLE_PROJECT_REPONAME
          namespace: $NAMESPACE
          release-name: $CIRCLE_PROJECT_REPONAME
      - run:
          name: Deployed helm chart
          command: cat ./helm/$CIRCLE_PROJECT_REPONAME/Chart.yaml
      - run: *tag-successful-deployment

workflows:
  version: 2.1
  release:
    jobs:
      - build:
          name: build-release
          context: org-carbon
      - deploy-docker:
          context: org-carbon
          requires:
            - build-release
          filters:
            branches:
              only: master
      - prepare-next-release:
          context: org-carbon
          requires:
            - deploy-docker
      - deploy:
          name: deploy-dev-release
          context: org-carbon
          requires:
            - prepare-next-release